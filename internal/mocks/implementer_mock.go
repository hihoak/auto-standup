// Code generated by MockGen. DO NOT EDIT.
// Source: ./implementation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	jira "github.com/andygrunwald/go-jira"
	gomock "github.com/golang/mock/gomock"
	utils "github.com/hihoak/auto-standup/pkg/utils"
)

// MockImplementer is a mock of Implementer interface.
type MockImplementer struct {
	ctrl     *gomock.Controller
	recorder *MockImplementerMockRecorder
}

// MockImplementerMockRecorder is the mock recorder for MockImplementer.
type MockImplementerMockRecorder struct {
	mock *MockImplementer
}

// NewMockImplementer creates a new mock instance.
func NewMockImplementer(ctrl *gomock.Controller) *MockImplementer {
	mock := &MockImplementer{ctrl: ctrl}
	mock.recorder = &MockImplementerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImplementer) EXPECT() *MockImplementerMockRecorder {
	return m.recorder
}

// FromStrKeysToIssues mocks base method.
func (m *MockImplementer) FromStrKeysToIssues(ctx context.Context, issueKeys []string) ([]*jira.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromStrKeysToIssues", ctx, issueKeys)
	ret0, _ := ret[0].([]*jira.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromStrKeysToIssues indicates an expected call of FromStrKeysToIssues.
func (mr *MockImplementerMockRecorder) FromStrKeysToIssues(ctx, issueKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromStrKeysToIssues", reflect.TypeOf((*MockImplementer)(nil).FromStrKeysToIssues), ctx, issueKeys)
}

// GetIssuesFromLastWorkDay mocks base method.
func (m *MockImplementer) GetIssuesFromLastWorkDay(cfg *utils.Config) ([]*jira.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesFromLastWorkDay", cfg)
	ret0, _ := ret[0].([]*jira.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesFromLastWorkDay indicates an expected call of GetIssuesFromLastWorkDay.
func (mr *MockImplementerMockRecorder) GetIssuesFromLastWorkDay(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesFromLastWorkDay", reflect.TypeOf((*MockImplementer)(nil).GetIssuesFromLastWorkDay), cfg)
}

// IssuesToStr mocks base method.
func (m *MockImplementer) IssuesToStr(issues []*jira.Issue) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuesToStr", issues)
	ret0, _ := ret[0].(string)
	return ret0
}

// IssuesToStr indicates an expected call of IssuesToStr.
func (mr *MockImplementerMockRecorder) IssuesToStr(issues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuesToStr", reflect.TypeOf((*MockImplementer)(nil).IssuesToStr), issues)
}
